/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.markruler.async;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import kong.unirest.Unirest;
import kong.unirest.UnirestException;
import lombok.extern.slf4j.Slf4j;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

@Slf4j
// @SpringBootApplication
public class App {

    private static final String FREE_FAKE_API = "https://jsonplaceholder.typicode.com/todos/1";

    private static final ObjectMapper objectMapper = new ObjectMapper();

    public static void main(String[] args) {
        // SpringApplication.run(App.class, args);

        // runHttpClient();
        runKongUnirest();
        // runOkHttp();
        // runSpringRestTemplate();
        // runSpringWebClient(); // recommended: since Spring 5
        // runSpringAsyncTasksConcurrently();
    }

    /**
     * @see kong.unirest.Unirest
     * @see kong.unirest.HttpResponse
     * @see kong.unirest.JsonNode
     * @see <a href="https://github.com/kong/unirest-java">repository</a>
     */
    private static void runKongUnirest() {
        try {

            kong.unirest.HttpResponse
                    <kong.unirest.JsonNode> response =
                    Unirest
                            .get(FREE_FAKE_API)
                            .header("Content-Type", "application/json")
                            .asJson();
            Map<String, Object> map = objectMapper.readValue(response.getBody().toString(), Map.class);
            log.info("Response body: {}", map);
        } catch (UnirestException | JsonProcessingException e) {
            log.error(e.toString(), e);
        }
    }

    /**
     * Java 11부터 지원한다.
     *
     * @see HttpClient
     * @see <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/HttpClient.html">HttpClient</a>
     */
    private static void runHttpClient() {
        // HttpClient 인스턴스 생성
        HttpClient httpClient = HttpClient.newHttpClient();

        // 요청할 URI
        URI uri = URI.create(FREE_FAKE_API);

        // GET 요청 객체 생성
        HttpRequest httpRequest = HttpRequest.newBuilder()
                .uri(uri)
                .GET()
                .build();

        // 요청 보내고 응답 받기
        CompletableFuture<HttpResponse<String>> futureResponse = httpClient.sendAsync(httpRequest, HttpResponse.BodyHandlers.ofString());

        // 응답 처리
        futureResponse.thenAccept(response -> {
            int statusCode = response.statusCode();
            String responseBody = response.body();

            try {
                Map<String, Object> map = objectMapper.readValue(responseBody, Map.class);
                log.info("Status code: {}", statusCode);
                log.info("Response body: {}", map);
            } catch (JsonProcessingException e) {
                throw new RuntimeException(e);
            }
        });

        // 프로그램 종료 방지를 위해 잠시 대기
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            new RuntimeException(e);
        }
    }
}
